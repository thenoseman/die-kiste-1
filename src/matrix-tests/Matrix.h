#ifndef MATRIX_CONSTANTS_H
#define MATRIX_CONSTANTS_H

#include <FastLED.h>
#include <Arduino.h>

class Matrix {
  private:

    // Must set these until I really get cpp classes constructors
    static const int dinPin = PIN_A2;
    static const int numLeds = 100;
    static const int brightness = 5;

    static const int sizeXY = 10;
    static const int alphaLength = 36;
    static const int alphaElementSize = 13;

    uint8_t changed = 0;

    // LED Numbers and letters
    const int alpha[10][alphaElementSize] = {
      {10,11,12,13,20,24,31,32,33,34,-1,-1,-1}, // 0
      {13,20,21,22,23,24,-1,-1,-1,-1,-1,-1,-1}, // 1
      {10,11,14,20,22,24,30,33,-1,-1,-1,-1,-1}, // 2
      {10,14,20,22,24,31,33,-1,-1,-1,-1,-1,-1}, // 3
      {12,13,14,22,30,31,32,33,34,-1,-1,-1,-1}, // 4
      {10,12,13,14,20,22,24,31,34,-1,-1,-1,-1}, // 5
      {10,11,12,13,20,22,24,30,31,32,34,-1,-1}, // 6
      {10,11,14,22,24,33,34,-1,-1,-1,-1,-1,-1}, // 7
      {10,11,12,13,14,20,22,24,30,31,32,33,34}, // 8
      {10,12,13,14,20,22,24,31,32,33,34,-1,-1}, // 9
      //{10,11,12,13,22,24,30,31,32,33,-1,-1,-1}, // A
      //{10,11,12,13,14,20,22,24,31,33,-1,-1,-1}, // B
      //{11,12,13,20,24,30,34,-1,-1,-1,-1,-1,-1}, // C
      //{10,11,12,13,14,20,24,31,32,33,-1,-1,-1}, // D
      //{10,11,12,13,14,20,22,24,30,32,34,-1,-1}, // E
      //{10,11,12,13,14,22,24,32,34,-1,-1,-1,-1}, // F
      //{11,12,13,20,22,24,30,31,32,34,-1,-1,-1}, // G
      //{10,11,12,13,14,22,30,31,32,33,34,-1,-1}, // H
      //{10,14,20,21,22,23,24,30,34,-1,-1,-1,-1}, // I
      //{11,20,31,32,33,34,-1,-1,-1,-1,-1,-1,-1}, // J
      //{10,11,12,13,14,22,30,31,33,34,-1,-1,-1}, // K
      //{10,11,12,13,14,20,30,-1,-1,-1,-1,-1,-1}, // L
      //{10,11,12,13,14,22,23,30,31,32,33,34,-1}, // M
      //{10,11,12,13,14,21,22,23,30,31,32,33,34}, // N
      //{11,12,13,20,24,31,32,33,-1,-1,-1,-1,-1}, // O
      //{10,11,12,13,14,22,24,33,-1,-1,-1,-1,-1}, // P
      //{11,12,13,20,21,24,30,31,32,33,-1,-1,-1}, // Q
      //{10,11,12,13,14,21,22,24,30,32,33,-1,-1}, // R
      //{10,13,20,22,24,31,34,-1,-1,-1,-1,-1,-1}, // S
      //{14,20,21,22,23,24,34,-1,-1,-1,-1,-1,-1}, // T
      //{11,12,13,14,20,30,31,32,33,34,-1,-1,-1}, // U
      //{12,13,14,20,21,32,33,34,-1,-1,-1,-1,-1}, // V
      //{10,11,12,13,14,21,22,30,31,32,33,34,-1}, // W
      //{10,11,13,14,22,30,31,33,34,-1,-1,-1,-1}, // X
      //{13,14,20,21,22,33,34,-1,-1,-1,-1,-1,-1}, // Y
      //{10,11,14,20,22,24,30,33,34,-1,-1,-1,-1}  // Z
    };

  public:

    // Pictures
    const int big3[34] = {21,22,27,28,31,32,37,38,41,42,44,45,47,48,51,52,54,55,57,58,61,62,63,64,65,66,67,68,72,73,74,75,76,77};
    const int big2[34] = {21,22,27,28,31,32,33,37,38,41,42,43,44,47,48,51,52,53,54,55,57,58,61,62,64,65,66,67,68,71,72,75,76,77};
    const int big1[24] = {25,26,35,36,37,46,47,48,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68};
    const int runner[24] = {10,11,14,21,25,32,33,35,42,43,44,45,50,51,53,54,55,56,57,60,63,66,67,74};
    const int smileyPositive[74] = {2,3,4,5,6,7,11,12,13,14,15,16,17,18,20,21,22,24,27,28,29,30,31,33,34,37,38,39,40,41,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,63,64,67,68,69,70,71,72,74,77,78,79,81,82,83,84,85,86,87,88,92,93,94,95,96,97};
    const int smileyNegative[76] = {2,3,4,5,6,7,11,12,13,14,15,16,17,18,20,21,23,24,27,28,29,30,31,32,34,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,64,66,67,68,69,70,71,73,74,77,78,79,81,82,83,84,85,86,87,88,92,93,94,95,96,97};
    const int skull[43] = {14,15,16,17,18,22,23,24,25,26,28,29,33,34,35,36,38,39,42,43,44,46,47,48,49,53,54,55,56,58,59,62,63,64,65,66,68,69,74,75,76,77,78};
    const int box[37] = {1,2,3,4,5,6,11,16,17,21,26,28,31,36,39,41,46,49,51,52,53,54,55,56,59,62,67,69,73,78,79,84,85,86,87,88,89};

    CRGB leds[numLeds];

    // TODO: pass dinPin and numLeds and brightness in constructor
    //       FastLED doesn't like it??!
    Matrix();

    // show a LETTER/NUMBER
    void show(int alphaIndex, int startColumn, int startRow, CRGB color);
    void show(char letter, int startColumn, int startRow, CRGB color);
    void show(char letter);

    // Show a picture
    void picture(int picture[], int startColumn, int startRow, CRGB color);

    // This must be run on every loop()
    void update();
};
#endif
